
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'checkstyle'
    id 'jacoco'
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

javafx {
    version = "12.0.2"
    modules = [ 'javafx.controls' ]
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // https://mvnrepository.com/artifact/org.webjars.npm/sqlite3
    implementation 'org.webjars.npm:sqlite3:3.1.13'
    compile group:'org.xerial', name:'sqlite-jdbc', version:'3.8.11.2'

    implementation 'org.webjars.npm:gauge:2.7.3'
	testImplementation 'io.cucumber:cucumber-java:6.8.1'
    testImplementation 'io.cucumber:cucumber-junit:6.8.1'

    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile "org.testfx:testfx-junit:4.0.+"
    testCompile "org.testfx:openjfx-monocle:jdk-12.0.1+2"

}

application {
    // Define the main class for the application.
    mainClassName = 'logic.Main'
}

checkstyle {
    toolVersion '7.8.1'
    configFile file("config/checkstyle.xml")
}

checkstyleMain {
    source ='src/main/java'
}

checkstyleTest {
    source ='src/test/java'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'ohtu', 'src/test/resources']
        }
    }
}


jar {
    manifest {
        attributes(
            'Main-Class': 'logic.Main'
        )    
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    // set a system property for the test JVM(s)
    systemProperty 'testfx.robot', 'glass'
    systemProperty 'testfx.headless', 'true' // set false to see test running
    systemProperty 'glass.platform', 'Monocle'
    systemProperty 'monocle.platform', 'headless'
    systemProperty 'prism.order', 'sw'
    systemProperty 'prism.text', 't2k'
    systemProperty 'java.awt.headless', 'true'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // Fail the 'test' task on the first test failure
    failFast = true

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/Main.*'])
    }))
  }
}